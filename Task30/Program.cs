// Задача 30:
// Напишите программу, которая
// выводит массив из 8 элементов,
// заполненный нулями и единицами в случайном порядке.
// [1,0,1,1,0,1,0,0]

// int[] – массив (тип данных может быть любой, bool[]). Индексация начинается с 0.
int[] array = new int[8]; // new – выделяет место в памяти, int[8] – для 8 элементов типа int.
// Такой массив содержит в данных все элементы: 0 (по умолчанию массив заполнен нулями).
// int[] array1 = { 1, 2, 3, 4 }; // Сразу присваиваем конкретные значения (new не требуется).
// int[] array2 = new int[]{ 1, 2, 3, 4 };
// int[] array3 = new int[3]{ 1, 2, 3}; // Указываем количество элементов в массиве.
// Позволяет отследить количество значений, при несовпадении с количеством элементов – ошибка.
// var array4 = new int[8]; Неявная типизация. C# – Язык строгой типизации. var rnd = new Random();
// Тип данных определяется по правой части оператора присваивания. Когда это возможно определить,
// то разрешается использовать "var" (только в случаях когда ясно какой тип данных используется).
InputArray(array);
OutputArray(array);
Console.WriteLine();

void InputArray(int[] arr) // Применяем void потому, что если параметр массив, создаётся не новый массив,
{ // а только новая ссылка на тот же массив, внутри метода взаимодействие происходит с исходным массивом.
    Random rnd = new Random(); // Чтобы не создавать каждую итерацию новый объект, создаём его 1 раз.
    for (int i = 0; i < arr.Length; i++) // Но большей проблемой будет если вызывать "Random" в цикле,
    { // то на быстродейств-х устройствах массив будет заполнен одинаковыми значениями (псевдослучайный).
        arr[i] = rnd.Next(2); // В цикле только вызываем метод "Next".
    } // Используем так, иначе не будет случайности.
}

void OutputArray(int[] arr) // Если параметр не массив, создаётся новая переменная (копия передаваемой).
{
    for (int i = 0; i < arr.Length; i++) // Цикл "for" был придуман для работы с массивами.
    {
        Console.Write($"{arr[i]} "); // Доступ к элементу происходит по индексу.
    }
}
